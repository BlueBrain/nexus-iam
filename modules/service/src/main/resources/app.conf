# All application specific configuration should reside here
app {
  # The service description namespace
  description {
    # The name of the service
    name = "iam"
    # The environment where this machine is running
    environment = "local"
    environment = ${?ENVIRONMENT}
  }

  # Service instance specific settings
  instance {
    # The default interface to bind to
    interface = 127.0.0.1
    interface = ${?BIND_INTERFACE}
  }

  # Http binding settings
  http {
    # The interface to bind to
    interface = ${app.instance.interface}
    # The port to bind to
    port = 8080
    port = ${?BIND_PORT}
    # The default uri prefix
    prefix = "v0"
    prefix = ${?HTTP_PREFIX}
    # The service public uri
    public-uri = "http://localhost:8080"
    public-uri = ${?PUBLIC_URI}
  }

  # Service runtime settings
  runtime {
    # Arbitrary Future completion timeout
    default-timeout = 10 seconds
  }

  # Cluster specific settings
  cluster {
    # Duration after which actors are shutdown if they have no interaction
    passivation-timeout = 5 seconds
    passivation-timeout = ${?PASSIVATION_TIMEOUT}
    # Total number of shards in the cluster
    shards = 100
    seeds = ${?SEED_NODES}
  }

  # Persistence settings and event adapters
  persistence {
    journal-plugin = "cassandra-journal"
    snapshot-store-plugin = "cassandra-snapshot-store"
    query-journal-plugin = "cassandra-query-journal"

    # The collection of event adapters to register
    event-adapters {
      tagging = "ch.epfl.bluebrain.nexus.iam.service.store.TaggingEventAdapter"
    }
    # Event type to event adapter bindings
    event-adapter-bindings {
      "ch.epfl.bluebrain.nexus.iam.core.acls.Event$PermissionsAdded" = tagging
      "ch.epfl.bluebrain.nexus.iam.core.acls.Event$PermissionsSubtracted" = tagging
      "ch.epfl.bluebrain.nexus.iam.core.acls.Event$PermissionsRemoved" = tagging
      "ch.epfl.bluebrain.nexus.iam.core.acls.Event$PermissionsCleared" = tagging
    }
  }

  # Authentication / Authorization settings
  auth {
    admin-groups = []
    admin-groups += ${?IAM_ADMINGROUP}
  }

  # OIDC connectivity settings
  oidc {
    # issuer aka realm or origin
    issuer = "http://localhost:8080/realm"
    issuer = ${?OIDC_ISSUER}
    # authorize endpoint of the OIDC provider
    authorize-endpoint = "http://localhost:8080/oauth2/authorize"
    authorize-endpoint = ${?AUTHORIZE_ENDPOINT}
    # token endpoint of the OIDC provider
    token-endpoint     = "http://localhost:8080/token"
    token-endpoint     = ${?TOKEN_ENDPOINT}
    # userinfo endpoint of the OIDC provider
    userinfo-endpoint  = "http://localhost:8080/userinfo"
    userinfo-endpoint  = ${?USERINFO_ENDPOINT}
  }
}