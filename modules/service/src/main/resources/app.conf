# All application specific configuration should reside here
app {
  # The service description namespace
  description {
    # The name of the service
    name = "iam"
    # The environment where this machine is running
    environment = "local"
    environment = ${?ENVIRONMENT}
  }

  # Service instance specific settings
  instance {
    # The default interface to bind to
    interface = 127.0.0.1
    interface = ${?BIND_INTERFACE}
  }

  # Http binding settings
  http {
    # The interface to bind to
    interface = ${app.instance.interface}
    # The port to bind to
    port = 8080
    port = ${?BIND_PORT}
    # The default uri prefix
    prefix = "v0"
    prefix = ${?HTTP_PREFIX}
    # The service public uri
    public-uri = "http://localhost:8080"
    public-uri = ${?PUBLIC_URI}
  }

  # Service runtime settings
  runtime {
    # Arbitrary Future completion timeout
    default-timeout = 10 seconds
  }

  # Cluster specific settings
  cluster {
    # Duration after which actors are shutdown if they have no interaction
    passivation-timeout = 5 seconds
    passivation-timeout = ${?PASSIVATION_TIMEOUT}
    # Total number of shards in the cluster
    shards = 100
    seeds = ${?SEED_NODES}
  }

  # Persistence settings and event adapters
  persistence {
    journal-plugin = "cassandra-journal"
    snapshot-store-plugin = "cassandra-snapshot-store"
    query-journal-plugin = "cassandra-query-journal"

    # The collection of event adapters to register
    event-adapters {
      tagging = "ch.epfl.bluebrain.nexus.iam.service.store.TaggingEventAdapter"
    }
    # Event type to event adapter bindings
    event-adapter-bindings {
      "ch.epfl.bluebrain.nexus.commons.iam.acls.Event$PermissionsAdded" = tagging
      "ch.epfl.bluebrain.nexus.commons.iam.acls.Event$PermissionsSubtracted" = tagging
      "ch.epfl.bluebrain.nexus.commons.iam.acls.Event$PermissionsRemoved" = tagging
      "ch.epfl.bluebrain.nexus.commons.iam.acls.Event$PermissionsCleared" = tagging
    }
  }

  # Authentication / Authorization settings
  auth {
    test-mode = false # Set 'true' to bootstrap ACLs by granting top-level admin rights to anonymous users
    test-mode = ${?IAM_TESTMODE}
    admin-groups = []
    admin-groups += ${?IAM_ADMINGROUP1}
    admin-groups += ${?IAM_ADMINGROUP2}
    admin-groups += ${?IAM_ADMINGROUP3}
    admin-groups += ${?IAM_ADMINGROUP4}
  }

  # OIDC connectivity settings
  oidc {

    # The realm short name used whenever no real is passed on the authenticate endpoint
    default-realm = "CHANGE_ME"

    # The list of available providers. Any provider with a realm "CHANGE_ME" will be ignored
    providers: [
      {
        # realm short name
        realm = "CHANGE_ME"
        realm = ${?OIDC_1_REALM}
        # issuer of the realm. It should correspond with the issuer feld on the JWT
        issuer = "http://localhost/oidc/issuer"
        issuer = ${?OIDC_1_ISSUER}
        # where to find the Json Web Key defined (in order to verify the JWTs signature)
        jwk-cert = "http://localhost/oidc/jwk"
        jwk-cert = ${?OIDC_1_CERT}
        # authorize endpoint of the OIDC provider
        authorize-endpoint = "http://localhost:8081/oauth2/authorize"
        authorize-endpoint = ${?OIDC_1_AUTHORIZE}
        # token endpoint of the OIDC provider
        token-endpoint = "http://localhost:8081/oauth2/token"
        token-endpoint = ${?OIDC_1_TOKEN}
        # userinfo endpoint of the OIDC provider
        userinfo-endpoint = "http://localhost:8081/oauth2/userinfo"
        userinfo-endpoint = ${?OIDC_1_USERINFO}
      },
      {
        # realm short name
        realm = "CHANGE_ME"
        realm = ${?OIDC_2_REALM}
        # issuer of the realm. It should correspond with the issuer feld on the JWT
        issuer = "http://localhost/oidc/issuer"
        issuer = ${?OIDC_2_ISSUER}
        # where to find the Json Web Key defined (in order to verify the JWTs signature)
        jwk-cert = "http://localhost/oidc/jwk"
        jwk-cert = ${?OIDC_2_CERT}
        # authorize endpoint of the OIDC provider
        authorize-endpoint = "http://localhost:8082/oauth2/authorize"
        authorize-endpoint = ${?OIDC_2_AUTHORIZE}
        # token endpoint of the OIDC provider
        token-endpoint = "http://localhost:8082/oauth2/token"
        token-endpoint = ${?OIDC_1_TOKEN}
        # userinfo endpoint of the OIDC provider
        userinfo-endpoint = "http://localhost:8082/oauth2/userinfo"
        userinfo-endpoint = ${?OIDC_1_USERINFO}
      },
      {
        # realm short name
        realm = "CHANGE_ME"
        realm = ${?OIDC_3_REALM}
        # issuer of the realm. It should correspond with the issuer feld on the JWT
        issuer = "http://localhost/oidc/issuer"
        issuer = ${?OIDC_3_ISSUER}
        # where to find the Json Web Key defined (in order to verify the JWTs signature)
        jwk-cert = "http://localhost/oidc/jwk"
        jwk-cert = ${?OIDC_3_CERT}
        # authorize endpoint of the OIDC provider
        authorize-endpoint = "http://localhost:8082/oauth2/authorize"
        authorize-endpoint = ${?OIDC_3_AUTHORIZE}
        # token endpoint of the OIDC provider
        token-endpoint = "http://localhost:8082/oauth2/token"
        token-endpoint = ${?OIDC_3_TOKEN}
        # userinfo endpoint of the OIDC provider
        userinfo-endpoint = "http://localhost:8082/oauth2/userinfo"
        userinfo-endpoint = ${?OIDC_3_USERINFO}
      },
      {
        # realm short name
        realm = "CHANGE_ME"
        realm = ${?OIDC_4_REALM}
        # issuer of the realm. It should correspond with the issuer feld on the JWT
        issuer = "http://localhost/oidc/issuer"
        issuer = ${?OIDC_4_ISSUER}
        # where to find the Json Web Key defined (in order to verify the JWTs signature)
        jwk-cert = "http://localhost/oidc/jwk"
        jwk-cert = ${?OIDC_4_CERT}
        # authorize endpoint of the OIDC provider
        authorize-endpoint = "http://localhost:8082/oauth2/authorize"
        authorize-endpoint = ${?OIDC_4_AUTHORIZE}
        # token endpoint of the OIDC provider
        token-endpoint = "http://localhost:8082/oauth2/token"
        token-endpoint = ${?OIDC_4_TOKEN}
        # userinfo endpoint of the OIDC provider
        userinfo-endpoint = "http://localhost:8082/oauth2/userinfo"
        userinfo-endpoint = ${?OIDC_4_USERINFO}
      }
    ]
  }

  kafka {
    permissions-projection-id = "permissions"
    permissions-projection-id = ${?PERMISSIONS_PROJECTION_ID}
    permissions-topic = "permissions"
    permissions-topic = ${?PERMISSIONS_TOPIC}
  }
}