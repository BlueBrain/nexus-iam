# All application specific configuration should reside here
app {
  # The service description namespace
  description {
    # The name of the service
    name = "iam"
  }

  # Service instance specific settings
  instance {
    # The default interface to bind to
    interface = 127.0.0.1
    interface = ${?BIND_INTERFACE}
  }

  # Http binding settings
  http {
    # The interface to bind to
    interface = ${app.instance.interface}
    # The port to bind to
    port = 8080
    port = ${?BIND_PORT}
    # The default uri prefix
    prefix = "v1"
    prefix = ${?HTTP_PREFIX}
    # The service public uri
    public-uri = "http://"${app.http.interface}":"${app.http.port}
    public-uri = ${?PUBLIC_URI}
  }

  # Service runtime settings
  runtime {
    # Arbitrary Future completion timeout
    default-timeout = 30 seconds
  }

  # Cluster specific settings
  cluster {
    # Duration after which actors are shutdown if they have no interaction
    passivation-timeout = 2 seconds
    passivation-timeout = ${?PASSIVATION_TIMEOUT}
    # Timeout for requests to the distributed data
    replication-timeout = 5 seconds
    replication-timeout = ${?REPLICATION_TIMEOUT}
    # Total number of shards in the cluster
    shards = 30
    shards = ${?SHARDS}
    # The seeds to use for joining a cluster.  Should not contain the self address.
    # Example: 127.0.0.1:2552,127.0.0.2:2552,127.0.0.3:2552
    seeds = ${?SEED_NODES}
  }

  # Persistence specific settings
  persistence {
    journal-plugin = "cassandra-journal"
    snapshot-store-plugin = "cassandra-snapshot-store"
    query-journal-plugin = "cassandra-query-journal"
  }

  indexing {

    # Maximum number of events taken on each batch
    batch = 10
    batch = ${?INDEXING_BATCH}

    # Maximum amount of time to wait for the number of events to be taken on each batch
    batch-timeout = 400 millis
    batch-timeout  = ${?INDEXING_BATCH_TIMEOUT}

    retry {
      # The maximum number of times an index function is retried
      max-count = 10
      max-count  = ${?INDEXING_RETRY_MAX}

      # The maximum amount of time to wait between two retries
      max-duration = 20 seconds

      # The jitter added between retries
      random-factor = 0.2
    }
  }

  initial-acl {
    path = "/"
    path  = ${?INIT_ACL_PATH}
    identities {
      realm  = "CHANGEME"
      realm  = ${?INIT_ACL_REALM}
      groups = []
      groups += ${?INIT_ACL_ADMINGROUP1}
      groups += ${?INIT_ACL_ADMINGROUP2}
      groups += ${?INIT_ACL_ADMINGROUP3}
      groups += ${?INIT_ACL_ADMINGROUP4}
    }
    permissions = []
    permissions += ${?INIT_ACL_PERMS1}
    permissions += ${?INIT_ACL_PERMS2}
    permissions += ${?INIT_ACL_PERMS3}
  }

  # default sourcing configuration
  sourcing {
    # the maximum duration to wait for an aggregate to reply
    ask-timeout = 10 seconds
    ask-timeout = ${?SOURCING_ASK_TIMEOUT}
    # the journal plugin used to create event streams for arbitrary replays
    query-journal-plugin = ${app.persistence.query-journal-plugin}
    query-journal-plugin = ${?SOURCING_QUERY_JOURNAL_PLUGIN}
    # the maximum duration before a command evaluation times out
    command-evaluation-timeout = 5 seconds
    command-evaluation-timeout = ${?SOURCING_COMMAND_EVALUATION_TIMEOUT}
    # the execution context where commands are being evaluated; possible values are "akka" and "global"
    command-evaluation-execution-context = "global"
    command-evaluation-execution-context = ${?SOURCING_COMMAND_EVALUATION_EXECUTION_CONTEXT}
    # the total number of shards to allocate
    shards = 10
    shards = ${?SOURCING_SHARDS}
    # the aggregate actor passivation strategy
    passivation {
      # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
      lapsed-since-last-interaction = 5 seconds
      lapsed-since-last-interaction = ${?SOURCING_LAST_INTERACTION_PASSIVATION_TIMEOUT}
      # duration since the aggregate actors' recovery after which they should shut down (0 - disabled)
      lapsed-since-recovery-completed = 0 milliseconds
      lapsed-since-recovery-completed = ${?SOURCING_RECOVERY_PASSIVATION_TIMEOUT}
    }
    retry {
      # the retry strategy to use; possible values are: "never", "once" and "exponential"
      strategy = "exponential"
      strategy = ${?SOURCING_RETRY_STRATEGY}
      # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
      # (applicable only for strategy "exponential")
      initial-delay = 100 milliseconds
      initial-delay = ${?SOURCING_RETRY_INITIAL_DELAY}
      # maximum number of retries in case of failure (applicable only for strategy "exponential")
      max-retries = 7
      max-retries = ${?SOURCING_RETRY_MAX_RETRY}
      # the exponential factor (applicable only for strategy "exponential")
      factor = 2
      factor = ${?SOURCING_RETRY_FACTOR}
    }
  }

  # default key value store configuration
  key-value-store {
    # the maximum duration to wait for the replicator to reply
    ask-timeout = 10 seconds
    ask-timeout = ${?KEY_VALUE_STORE_ASK_TIMEOUT}
    # the maximum duration to wait for a consistent read or write across the cluster
    consistency-timeout = 10 seconds
    consistency-timeout = ${?KEY_VALUE_STORE_CONSISTENCY_TIMEOUT}
    # retry strategy
    retry {
      # possible values are: "never", "once" and "exponential"
      strategy = "exponential"
      strategy = ${?KEY_VALUE_STORE_RETRY_STRATEGY}
      # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
      initial-delay = 100 milliseconds
      initial-delay = ${?KEY_VALUE_STORE_RETRY_INITIAL_DELAY}
      # maximum number of retries in case of failure (applicable only for strategy "exponential")
      max-retries = 7
      max-retries = ${?KEY_VALUE_STORE_RETRY_MAX_RETRY}
      # the exponential factor (applicable only for strategy "exponential")
      factor = 2
      factor = ${?KEY_VALUE_STORE_RETRY_FACTOR}
    }
  }

  # permissions configuration
  permissions {
    # minimum permission set (cannot be removed and are part of the initial state of permissions)
    minimum = [
      # no read permission for acls, everyone should be able to see his own permissions
      "acls/write",
      # default permissions for permissions
      "permissions/read",
      "permissions/write",
    ]
    # permissions sourcing configuration
    sourcing {
      # the maximum duration to wait for an aggregate to reply
      ask-timeout = ${app.sourcing.ask-timeout}
      ask-timeout = ${?PERMISSIONS_ASK_TIMEOUT}
      # the journal plugin used to create event streams for arbitrary replays
      query-journal-plugin = ${app.sourcing.query-journal-plugin}
      query-journal-plugin = ${?PERMISSIONS_QUERY_JOURNAL_PLUGIN}
      # the maximum duration before a command evaluation times out
      command-evaluation-timeout = ${app.sourcing.command-evaluation-timeout}
      command-evaluation-timeout = ${?PERMISSIONS_COMMAND_EVALUATION_TIMEOUT}
      # the execution context where commands are being evaluated; possible values are "akka" and "global"
      command-evaluation-execution-context = "akka"
      command-evaluation-execution-context = ${?PERMISSIONS_COMMAND_EVALUATION_EXECUTION_CONTEXT}
      # the total number of shards to allocate; anything other than '1' doesn't make sense here
      shards = 1
      shards = ${?PERMISSIONS_SHARDS}
      passivation {
        # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
        lapsed-since-last-interaction = ${app.sourcing.passivation.lapsed-since-last-interaction}
        lapsed-since-last-interaction = ${?PERMISSIONS_LAST_INTERACTION_PASSIVATION_TIMEOUT}
        # duration since the aggregate actors' recovery after which they should shut down (0 - disabled)
        lapsed-since-recovery-completed = ${app.sourcing.passivation.lapsed-since-recovery-completed}
        lapsed-since-recovery-completed = ${?PERMISSIONS_RECOVERY_PASSIVATION_TIMEOUT}
      }
      retry {
        # possible values are: "never", "once" and "exponential"
        strategy = ${app.sourcing.retry.strategy}
        strategy = ${?PERMISSIONS_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        initial-delay = ${app.sourcing.retry.initial-delay}
        initial-delay = ${?PERMISSIONS_RETRY_INITIAL_DELAY}
        # maximum number of retries in case of failure (applicable only for strategy "exponential")
        max-retries = ${app.sourcing.retry.max-retries}
        max-retries = ${?PERMISSIONS_RETRY_MAX_RETRY}
        # the exponential factor (applicable only for strategy "exponential")
        factor = ${app.sourcing.retry.factor}
        factor = ${?PERMISSIONS_RETRY_FACTOR}
      }
    }
  }

  # realms configuration
  realms {
    # realms sourcing configuration
    sourcing {
      # the maximum duration to wait for an aggregate to reply
      ask-timeout = ${app.sourcing.ask-timeout}
      ask-timeout = ${?REALMS_ASK_TIMEOUT}
      # the journal plugin used to create event streams for arbitrary replays
      query-journal-plugin = ${app.sourcing.query-journal-plugin}
      query-journal-plugin = ${?REALMS_QUERY_JOURNAL_PLUGIN}
      # the maximum duration before a command evaluation times out
      command-evaluation-timeout = ${app.sourcing.command-evaluation-timeout}
      command-evaluation-timeout = ${?REALMS_COMMAND_EVALUATION_TIMEOUT}
      # the execution context where commands are being evaluated; possible values are "akka" and "global"
      command-evaluation-execution-context = "akka"
      command-evaluation-execution-context = ${?REALMS_COMMAND_EVALUATION_EXECUTION_CONTEXT}
      # the total number of shards to allocate
      shards = ${app.sourcing.shards}
      shards = ${?REALMS_SHARDS}
      passivation {
        # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
        lapsed-since-last-interaction = ${app.sourcing.passivation.lapsed-since-last-interaction}
        lapsed-since-last-interaction = ${?REALMS_LAST_INTERACTION_PASSIVATION_TIMEOUT}
        # duration since the aggregate actors' recovery after which they should shut down (0 - disabled)
        lapsed-since-recovery-completed = ${app.sourcing.passivation.lapsed-since-recovery-completed}
        lapsed-since-recovery-completed = ${?REALMS_RECOVERY_PASSIVATION_TIMEOUT}
      }
      retry {
        # possible values are: "never", "once" and "exponential"
        strategy = ${app.sourcing.retry.strategy}
        strategy = ${?REALMS_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        initial-delay = ${app.sourcing.retry.initial-delay}
        initial-delay = ${?REALMS_RETRY_INITIAL_DELAY}
        # maximum number of retries in case of failure (applicable only for strategy "exponential")
        max-retries = ${app.sourcing.retry.max-retries}
        max-retries = ${?REALMS_RETRY_MAX_RETRY}
        # the exponential factor (applicable only for strategy "exponential")
        factor = ${app.sourcing.retry.factor}
        factor = ${?REALMS_RETRY_FACTOR}
      }
    }

    # realms key value store configuration
    key-value-store {
      # the maximum duration to wait for the replicator to reply
      ask-timeout = ${app.key-value-store.ask-timeout}
      ask-timeout = ${?REALMS_KEY_VALUE_STORE_ASK_TIMEOUT}
      # the maximum duration to wait for a consistent read or write across the cluster
      consistency-timeout = ${app.key-value-store.consistency-timeout}
      consistency-timeout = ${?REALMS_KEY_VALUE_STORE_CONSISTENCY_TIMEOUT}
      # retry strategy
      retry {
        # possible values are: "never", "once" and "exponential"
        strategy = ${app.key-value-store.retry.strategy}
        strategy = ${?REALMS_KEY_VALUE_STORE_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        initial-delay = ${app.key-value-store.retry.initial-delay}
        initial-delay = ${?REALMS_KEY_VALUE_STORE_RETRY_INITIAL_DELAY}
        # maximum number of retries in case of failure (applicable only for strategy "exponential")
        max-retries = ${app.key-value-store.retry.max-retries}
        max-retries = ${?REALMS_KEY_VALUE_STORE_RETRY_MAX_RETRY}
        # the exponential factor (applicable only for strategy "exponential")
        factor = ${app.key-value-store.retry.factor}
        factor = ${?REALMS_KEY_VALUE_STORE_RETRY_FACTOR}
      }
    }
  }
}