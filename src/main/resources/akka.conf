akka {

  http {
    server.parsing.max-content-length = 10g
    server.parsing.max-content-length = ${?AKKA_HTTP_MAX_CONTENT_LENGTH}
    host-connection-pool  {
      max-connections   = 16
      max-connections   = ${?AKKA_HTTP_MAX_CONNECTIONS}
      max-open-requests = 64
      max-open-requests = ${?AKKA_HTTP_MAX_OPEN_REQUESTS}
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = off
  loglevel = INFO
  loglevel = ${?AKKA_LOG_LEVEL}

  extensions += "akka.cluster.ddata.DistributedData"
  extensions += "com.romix.akka.serialization.kryo.KryoSerializationExtension$"

  actor {

    kryo {
      idstrategy = "automatic"

      # Define a default size for byte buffers used during serialization
      buffer-size = 4096

      # Log implicitly registered classes. Useful, if you want to know all classes which are serialized.
      implicit-registration-logging = true

      # Set compression
      post-serialization-transformations = "lz4"
      post-serialization-transformations = ${?KRYO_COMPRESSION}

      kryo-custom-serializer-init = "ch.epfl.bluebrain.nexus.iam.io.KryoSerializerInit"
    }

    provider = "akka.cluster.ClusterActorRefProvider"

    enable-additional-serialization-bindings = on

    allow-java-serialization = off

    serializers {
      circeEvent = "ch.epfl.bluebrain.nexus.iam.io.EventSerializer"
      kryo       = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "ch.epfl.bluebrain.nexus.iam.acls.AclEvent"     = circeEvent
      "ch.epfl.bluebrain.nexus.iam.acls.AclState"     = kryo
      "ch.epfl.bluebrain.nexus.iam.acls.AclCommand"   = kryo
      "ch.epfl.bluebrain.nexus.iam.acls.AclRejection" = kryo

      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsEvent"     = circeEvent
      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsState"     = kryo
      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsCommand"   = kryo
      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsRejection" = kryo

      "ch.epfl.bluebrain.nexus.iam.realms.RealmEvent"     = circeEvent
      "ch.epfl.bluebrain.nexus.iam.realms.RealmState"     = kryo
      "ch.epfl.bluebrain.nexus.iam.realms.RealmCommand"   = kryo
      "ch.epfl.bluebrain.nexus.iam.realms.RealmRejection" = kryo

      "ch.epfl.bluebrain.nexus.iam.types.Label"     = kryo
      "ch.epfl.bluebrain.nexus.iam.types.ResourceF" = kryo

      "ch.epfl.bluebrain.nexus.sourcing.akka.Msg"                                       = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Start"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Stop$"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$FetchLatestState$" = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$LatestState"       = kryo

      "ch.epfl.bluebrain.nexus.iam.realms.Groups$Read"     = kryo
      "ch.epfl.bluebrain.nexus.iam.realms.Groups$Write"    = kryo
      "ch.epfl.bluebrain.nexus.iam.realms.Groups$Response" = kryo
      "ch.epfl.bluebrain.nexus.iam.realms.Groups$Ack"      = kryo

      "scala.runtime.BoxedUnit" = kryo
      "scala.util.Left"  = kryo
      "scala.util.Right" = kryo
      "com.nimbusds.jose.jwk.JWKSet" = kryo
    }
  }

  cluster {
    min-nr-of-members = 1
    min-nr-of-members = ${?CLUSTER_MIN_NR_OF_MEMBERS}
    sharding.state-store-mode = ddata
    downing-provider-class = "ch.epfl.bluebrain.nexus.commons.downing.KeepOldestAkkaDowningProvider"
    downing-provider-class = ${?DOWNING_PROVIDER_CLASS}
  }

  remote {
    # Startup timeout
    startup-timeout = 30 s
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = ${app.instance.interface}
      hostname = ${?REMOTING_INTERFACE}
      hostname = ${?override.remoting.interface}
      port = 2552
      port = ${?REMOTING_PORT}
      port = ${?override.remoting.port}
      # Sets the send buffer size of the Sockets (0b for platform defaults)
      send-buffer-size = ${?REMOTING_SEND_BUFFER_SIZE}
      # Sets the receive buffer size of the Sockets (0b for platform defaults)
      receive-buffer-size = ${?REMOTING_RECV_BUFFER_SIZE}
      # Maximum message size the transport will accept. Do not choose an arbitrary large value when using UDP,
      # since UDP does not support large datagrams.
      maximum-frame-size = ${?REMOTING_MAXIMUM_FRAME_SIZE}
    }
  }

  persistence {
    journal.plugin = ${app.persistence.journal-plugin}
    snapshot-store.plugin = ${app.persistence.snapshot-store-plugin}
  }
}
